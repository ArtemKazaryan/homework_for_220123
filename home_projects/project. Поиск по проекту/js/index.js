/* index.js */
import { data } from "./data.js";

const results = document.querySelector("#results-list");
const search = document.querySelector("#app-search");

const render = (query = "") => {
  const cleanedupQuery = query.trim().toLowerCase();
  const filtered = data.filter(item => item.spacecraft.toLowerCase().includes(cleanedupQuery));

  results.innerHTML = "";
  filtered.forEach(item => {
    results.insertAdjacentHTML("beforeend", `<li>${item.spacecraft}</li>`)
  });
}


// render as the user types
search.addEventListener("keyup", () => {
  render(search.value);
});


// render on page load
render();



// Цель этого проекта - предоставить пользователю возможность поиска космического корабля, представленного в файле `data.js`, путем ввода имени космического корабля в поле поиска.

// Поиск не должен быть чувствительным к регистру. Также следует игнорировать начальные и конечные пробелы в поисковом запросе.


// **Подсказки:**

// - начните с поиска ввода того `ul`, где будут перечислены космические корабли. Сохраните их в переменных.
// - определите вызываемую функцию `render()`, которая ожидает параметр `query`.
// - заставьте эту функцию визуализировать **все** космические корабли.
// - добавьте прослушиватель событий на ввод поиска, чтобы функция рендеринга вызывалась каждый раз, когда пользователь вводит данные в этот ввод поиска. Кроме того, убедитесь, что в качестве аргумента `query` передано значение, которое было написано пользователем.
// - убедитесь, что на этом этапе все космические корабли отрисовываются, когда пользователь вводит что-либо в поисковой строке. Также убедитесь, что результаты не дублируются каждый раз, когда вы вводите символ в поле поиска.
// - отфильтруйте космический корабль на основе аргумента `query`.
// - убедитесь, что на этом этапе пользователь может искать космический корабль.
// - **улучшение поиска**. Сохраните аргумент `query` в новой переменной, например, `cleanedupQuery`. Мы сделаем некоторую очистку, чтобы улучшить поиск.
// - чтобы сделать поиск нечувствительным к регистру, вы можете преобразовать каждый космический корабль в нижний регистр. Для космического корабля вы можете сделать это внутри обратного вызова `.filter()`.
// - заставьте поиск игнорировать начальные и конечные пробелы.
// - убедитесь, что на этом этапе пользователь может искать космический корабль. Поиск должен быть нечувствительным к регистру и игнорировать начальные и конечные пробелы.